<#@ template debug="true" hostspecific="false" language="C#" inherits="T4TemplateAction<TypeBase>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Codge.DataModel" #>
<#@ import namespace="Codge.Generator.Common" #>
using Tangosol.IO.Pof;

namespace Serialisers.<#= Type.Namespace.GetFullName(".") #>
{
	public class <#= Type.Name #> : IPofSerializer
	{

		object IPofSerializer.Deserialize(IPofReader reader)
        {
			var result = new Types.<#= Type.GetFullName(".") #>(
<#
					bool bFirst = true;
					foreach(var field in Type.Fields)
					{
#>
				<#= bFirst ? " " : ","  #>(<#= field.Type.TypesQName() #>)reader.Read<#= field.CoherenceType() #>(<#= field.Id #>)
<#				
						bFirst = false;
					}
#>
				);
			reader.ReadRemainder();
			return result;
        }

        void IPofSerializer.Serialize(IPofWriter writer, object o)
        {
            var obj = (<#= Type.TypesQName() #>)o;

<#
					foreach(var field in Type.Fields)
					{
#>
			writer.Write<#= field.CoherenceType() #>(<#= field.Id #>, obj.<#= field.Name #>);
<#				
					}
#>
			writer.WriteRemainder(null);
		}

	}
}


<#+
	public CompositeType Type{get; private set;}

	public Composite(TypeBase type, ModelBehaviour modelBehaviour)
        : base(modelBehaviour)
	{
		Type = type as CompositeType;
	}

	public override bool IsApplicable()
	{
		return Type!=null;
	}

	public override PathAndContent Execute(Context context)
	{
		return new PathAndContent(new ItemInformation(Type.GetFullName("."), "Serialisers.cs"), TransformText());
	}
#>