<#@ template debug="true" hostspecific="false" language="C#" inherits="T4TemplateAction<TypeBase>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Codge.DataModel" #>
<#@ import namespace="Codge.Generator.Common" #>
using Codge.BasicModel.CS.Serialisation;
using System.Xml;
using Types.<#= Type.Namespace.GetFullName(".") #>;

namespace Serialisers.<#= Type.Namespace.GetFullName(".") #>
{
	public class <#= Type.Name #> : IXmlSerialiser
	{

        public void Serialize(XmlWriter writer, object o, SerialisationContext context)
        {
            var obj = (<#= Type.TypesQName() #>)o;

<#
					foreach(var field in Type.GetAllFields())
					{
						string fieldName = ModelBehaviour.GetMemberName(field);
						if(field.IsCollection)
						{
							if(field.Type.IsBuiltIn() || field.Type.IsPrimitive())
							{
#>
			Utils.SerialiseBuiltInCollection(writer, "<#= field.Name #>", obj.<#= fieldName #>, context);
<#				
							}
                            else if(field.Type.IsEnum())
                            {
#>
			Utils.SerialiseEnumCollectionAsString(writer, "<#= field.Name #>", obj.<#= fieldName #>, <#= field.Type.Name #>Converter.ConvertToString, context);
<#				
                            }
							else
							{
#>
			Utils.SerialiseCollection(writer, "<#= field.Name #>", obj.<#= fieldName #>, context);
<#
							}
						}
						else if(field.IsContent())
						{
                            if(field.IsCData())
                            {
#>
            if(obj.<#= fieldName #> != null)
			    writer.WriteCData(obj.<#= fieldName #>.ToString());
<#				
                            }
                            else if(field.Type.IsEnum())
                            {
#>
            if(obj.<#= fieldName #> != null)
			    writer.WriteValue(<#= field.Type.Name #>Converter.ConvertToString(obj.<#= fieldName #>));
<#
                            }
                            else
                            {
#>
            if(obj.<#= fieldName #> != null)
			    writer.WriteValue(obj.<#= fieldName #>.ToString());
<#				
                            }
						}
						else if(field.IsAttribute())
						{
#>
            if(obj.<#= fieldName #> != null)
                writer.WriteAttributeString("<#= field.Name #>", obj.<#= fieldName #>.ToString());
<#				
						}
						else
						{
							if(field.Type.IsComposite())
							{
                                if(field.IsOptional())
                                {
#>
			Utils.SerialiseIfHasValue(writer, "<#= field.Name #>", obj.<#= fieldName #>, context);
<#
                                }
                                else
                                {
#>
			Utils.Serialise(writer, "<#= field.Name #>", obj.<#= fieldName #>, context);
<#
                                }
							}
                            else if(field.Type.IsEnum())
                            {
                                if(field.IsOptional())
                                {
#>
			Utils.SerialiseEnumAsStringIfHasValue(writer, "<#= field.Name #>", obj.<#= fieldName #>, <#= field.Type.Name #>Converter.ConvertToString, context);
<#
                                }
                                else
                                {
#>
			Utils.SerialiseEnumAsString(writer, "<#= field.Name #>", obj.<#= fieldName #>, <#= field.Type.Name #>Converter.ConvertToString, context);
<#
                                }

                            }
                            else
							{
                                string cdata = field.IsCData() ? "CData" : string.Empty;
                                if(field.IsOptional())
                                {
#>
			Utils.Serialise<#= cdata #>IfHasValue(writer, "<#= field.Name #>", obj.<#= fieldName #>, context);
<#
                                }
                                else
                                {
#>
			Utils.Serialise<#= cdata #>Value(writer, "<#= field.Name #>", obj.<#= fieldName #>, context);
<#
                                }
							}
                            
						}
					}
#>
		}

	}
}


<#+
	public CompositeType Type{get; private set;}

	public Composite(TypeBase type, ModelBehaviour modelBehaviour)
        : base(modelBehaviour)
	{
		Type = type as CompositeType;
	}

	public override bool IsApplicable()
	{
		return Type!=null;
	}

	public override PathAndContent Execute(Context context)
	{
		return new PathAndContent(new ItemInformation(Type.QName(), "Serialisers.cs"), TransformText());
	}
#>