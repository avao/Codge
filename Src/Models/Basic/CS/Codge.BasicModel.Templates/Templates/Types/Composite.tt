<#@ template debug="true" hostspecific="false" language="C#" inherits="T4TemplateAction<TypeBase>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Codge.DataModel" #>
<#@ import namespace="Codge.Generator" #>

namespace Types.<#= Type.Namespace.GetFullName(".") #>
{
	public class <#= Type.Name #>
	{
	    public <#= Type.Name #>()
		{}

<#				
					if(Type.Fields.Any())
					{
#>

		public <#= Type.Name #>(<#= ModelBehaviour.GetCtorParamters(Type) #>)
		{
<#				
						foreach(var field in Type.Fields)
						{
#>
			<#= ModelBehaviour.GetMemberName(field) #> = <#= ModelBehaviour.GetParameterName(field) #>;
<#				
						}
#>
		}


<#				
					}

					foreach(var field in Type.Fields)
					{
#>
		public	<#= ModelBehaviour.GetNativeType(field) #> <#= ModelBehaviour.GetMemberName(field) #> {get; set;}
<#				
					}
#>
	}
}


<#+
	

	public CompositeType Type {get; private set;}

	public Composite(TypeBase type, IModelBehaviour modelBehaviour)
        : base(modelBehaviour)
	{
		Type = type as CompositeType;
	}

	public override bool IsApplicable()
	{
		return Type!=null;
	}

	public override PathAndContent Execute(Context context)
	{
		return new PathAndContent(new ItemInformation(Type.QName(), "Types.cs"), TransformText());
	}

#>