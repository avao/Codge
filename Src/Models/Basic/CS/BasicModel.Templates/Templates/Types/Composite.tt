<#@ template debug="true" hostspecific="false" language="C#" inherits="T4TemplateAction<TypeBase>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Codge.DataModel" #>
<#@ import namespace="Codge.Generator" #>


namespace Types.<#= Type.Namespace.GetFullName(".") #>
{
	public class <#= Type.Name #>
	{
		public <#= Type.Name #>(<#= Type.GetCtorParamters() #>)
		{
<#				
					foreach(var field in Type.Fields)
					{
#>
			<#= field.Name #> = <#= field.GetParameterName() #>;
<#				
					}
#>
		}


<#				
					foreach(var field in Type.Fields)
					{
#>
		public	<#= field.GetNativeType() #> <#= Type.GetMemberName(field)#> {get; private set;}
<#				
					}
#>
	}
}


<#+
	

	public CompositeType Type{get; private set;}

	public Composite(TypeBase type)
	{
		Type = type as CompositeType;
	}

	public override bool IsApplicable()
	{
		return Type!=null;
	}

	public override PathAndContent Execute(Context context)
	{
		return new PathAndContent(Utils.GetOutputPath(Type, "Types", "cs"), TransformText());
	}

#>