<#@ template debug="true" hostspecific="false" language="C#" inherits="T4TemplateAction<TypeBase>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Codge.DataModel" #>
<#@ import namespace="Codge.Generator" #>
using BasicModel.CS.Serialisation;
using System.Xml;

namespace Serialisers.<#= Type.Namespace.GetFullName(".") #>
{
	public class <#= Type.Name #> : IXmlSerialiser
	{

        public void Serialize(XmlWriter writer, object o, SerialisationContext context)
        {
            var obj = (<#= Type.QName() #>)o;

<#
					foreach(var field in Type.Fields)
					{ //TODO check if isCollection
						if(field.IsAttribute())
						{
#>
            writer.WriteAttributeString("<#= field.Name #>", obj.<#= field.Name #>.ToString());
<#				
						}
						else
						{
#>
            writer.WriteStartElement("<#= field.Name #>");
<#				
							if(field.Type.IsComposite())
							{
#>
            Utils.Serialise(writer, obj.<#= field.Name #>, context);
<#	
							}
							else
							{
#>
			writer.WriteValue(obj.<#= field.Name #>);
<#
							}
#>
            writer.WriteEndElement();
<#				
						}
					}
#>
		}

	}
}


<#+
	public CompositeType Type{get; private set;}

	public Composite(TypeBase type)
	{
		Type = type as CompositeType;
	}

	public override bool IsApplicable()
	{
		return Type!=null;
	}

	public override PathAndContent Execute(Context context)
	{
		return new PathAndContent(Utils.GetOutputPath(Type, "Serialisers", "cs"), TransformText());
	}
#>