<#@ template debug="true" hostspecific="false" language="C#" inherits="T4TemplateAction<TypeBase>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Codge.DataModel" #>
<#@ import namespace="Codge.Generator" #>
<#@ import namespace="Codge.BasicModel.Templates.CS" #>

using System.Collections.Generic;

namespace Types.<#= Type.Namespace.GetFullName(".") #>
{
	public enum <#= Type.Name #>
	{

<#				
					bool first=true;
					foreach(var item in Type.Items)
					{
						string prefix = first ? "" : ",";
#>
		<#= prefix #><#= ModelBehaviour.GetEnumItemName(item) #>
<#						
						first=false;
					}
#>
	
	}

    public static class <#= Type.Name #>Converter
	{
        private static string[] _values = new string[<#= Type.Items.Count() #>];
        private static IDictionary<string, <#= Type.Name #> > _stringToEnum = new Dictionary<string, <#= Type.Name #> >();

        static <#= Type.Name #>Converter()
        {
<#				
					foreach(var item in Type.Items)
					{
#>
		    _values[(int)<#= Type.Name #>.<#= ModelBehaviour.GetEnumItemName(item) #>] = "<#= item.Name #>";
            _stringToEnum.Add("<#= item.Name #>", <#= Type.Name #>.<#= ModelBehaviour.GetEnumItemName(item) #>);
<#						
					}
#>
        }

        public static string ConvertToString(<#= Type.Name #> value)
        {
            return _values[(int)value];
	    }

        public static <#= Type.Name #> ConvertToEnum(string value)
        {
            return _stringToEnum[value];
	    }
	}
}


<#+
	public EnumerationType Type{get; private set;}

	public Enum(TypeBase type, IModelBehaviour modelBehaviour)
        : base(modelBehaviour)
	{
		Type = type as EnumerationType;
	}

	public override bool IsApplicable()
	{
		return Type!=null;
	}

	public override PathAndContent Execute(Context context)
	{
		return new PathAndContent(Utils.GetOutputPath(Type, "Types", "cs"), TransformText());
	}
#>