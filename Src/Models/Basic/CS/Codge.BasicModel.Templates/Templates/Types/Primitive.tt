<#@ template debug="true" hostspecific="false" language="C#" inherits="T4TemplateAction<TypeBase>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Codge.DataModel" #>
<#@ import namespace="Codge.Generator" #>


namespace Types.<#= Type.Namespace.GetFullName(".") #>
{
	public class <#= Type.Name #>
	{

	
	}
}


<#+
	public PrimitiveType Type{get; private set;}

	public Primitive(TypeBase type, IModelBehaviour modelBehaviour)
        : base(modelBehaviour)
	{
		Type = type as PrimitiveType;
	}

	public override bool IsApplicable()
	{
		return Type!=null;
	}

	public override PathAndContent Execute(Context context)
	{
		return new PathAndContent(new ItemInformation(Type.QName(), "Types.cs"), TransformText());
	}
#>